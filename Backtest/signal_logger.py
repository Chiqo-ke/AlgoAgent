"""
Signal Logger - Logs actual trading signals for trade simulation
=================================================================

Logs all trading signals generated by strategies to enable:
1. Signal verification and debugging
2. Trade simulation with historical signals
3. Signal replay and analysis
4. Performance attribution

Features:
- Logs all buy/sell signals with full context
- Tracks entry/exit signals separately
- Stores indicator states at signal generation
- Exports to CSV and JSON formats
- Signal replay capability

Version: 1.0.0
"""

import pandas as pd
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
import csv
import json

logger = logging.getLogger(__name__)


class SignalLogger:
    """
    Logs all trading signals generated during backtesting
    """
    
    def __init__(self, strategy_id: str, signals_dir: Optional[Path] = None):
        """
        Initialize Signal Logger
        
        Args:
            strategy_id: Unique strategy identifier
            signals_dir: Directory to save signal logs (default: ./signals)
        """
        self.strategy_id = strategy_id
        self.signals_dir = signals_dir or Path(__file__).parent / "signals"
        self.signals_dir.mkdir(exist_ok=True)
        
        # Create signal log files
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.signal_log_csv = self.signals_dir / f"{strategy_id}_signals_{timestamp}.csv"
        self.signal_log_json = self.signals_dir / f"{strategy_id}_signals_{timestamp}.json"
        
        # Signal log buffer
        self.signals: List[Dict[str, Any]] = []
        
        # Initialize CSV with headers
        self._init_signal_log()
        
        logger.info(f"SignalLogger initialized: {self.signal_log_csv}")
    
    def _init_signal_log(self):
        """Initialize signal log CSV file with headers"""
        headers = [
            'signal_id',
            'timestamp',
            'symbol',
            'side',  # BUY/SELL
            'action',  # ENTRY/EXIT
            'order_type',  # MARKET/LIMIT/STOP
            'size',
            'price',
            'limit_price',
            'stop_price',
            'reason',  # Why signal was generated
            'indicator_values',  # JSON string of indicators at signal time
            'market_data',  # JSON string of OHLCV at signal time
            'strategy_state',  # JSON string of strategy internal state
            'order_id',  # Order ID from broker (if submitted)
            'notes'
        ]
        
        with open(self.signal_log_csv, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=headers)
            writer.writeheader()
    
    def log_signal(
        self,
        timestamp: datetime,
        symbol: str,
        side: str,
        action: str,
        order_type: str,
        size: int,
        price: float,
        reason: str,
        market_data: Dict[str, Any],
        indicator_values: Optional[Dict[str, float]] = None,
        strategy_state: Optional[Dict[str, Any]] = None,
        limit_price: Optional[float] = None,
        stop_price: Optional[float] = None,
        order_id: Optional[str] = None,
        notes: str = ""
    ) -> str:
        """
        Log a trading signal
        
        Args:
            timestamp: Signal timestamp
            symbol: Trading symbol
            side: BUY or SELL
            action: ENTRY or EXIT
            order_type: MARKET, LIMIT, or STOP
            size: Position size
            price: Current market price
            reason: Reason for signal (e.g., "EMA crossover", "Stop loss hit")
            market_data: OHLCV data at signal time
            indicator_values: Indicator values at signal time
            strategy_state: Strategy internal state
            limit_price: Limit price (if applicable)
            stop_price: Stop price (if applicable)
            order_id: Order ID from broker
            notes: Additional notes
            
        Returns:
            signal_id: Unique signal identifier
        """
        signal_id = f"SIG_{timestamp.strftime('%Y%m%d_%H%M%S')}_{len(self.signals)}"
        
        signal_entry = {
            'signal_id': signal_id,
            'timestamp': timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            'symbol': symbol,
            'side': side,
            'action': action,
            'order_type': order_type,
            'size': size,
            'price': price,
            'limit_price': limit_price or '',
            'stop_price': stop_price or '',
            'reason': reason,
            'indicator_values': json.dumps(indicator_values or {}),
            'market_data': json.dumps(market_data),
            'strategy_state': json.dumps(strategy_state or {}),
            'order_id': order_id or '',
            'notes': notes
        }
        
        # Append to buffer
        self.signals.append(signal_entry)
        
        # Write to CSV immediately
        with open(self.signal_log_csv, 'a', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=signal_entry.keys())
            writer.writerow(signal_entry)
        
        return signal_id
    
    def get_signal_summary(self) -> Dict[str, Any]:
        """
        Get summary statistics of logged signals
        
        Returns:
            Dictionary with signal statistics
        """
        if not self.signals:
            return {
                'total_signals': 0,
                'buy_signals': 0,
                'sell_signals': 0,
                'entry_signals': 0,
                'exit_signals': 0,
                'market_orders': 0,
                'limit_orders': 0,
                'stop_orders': 0
            }
        
        total = len(self.signals)
        buy = sum(1 for s in self.signals if s['side'] == 'BUY')
        sell = sum(1 for s in self.signals if s['side'] == 'SELL')
        entry = sum(1 for s in self.signals if s['action'] == 'ENTRY')
        exit_sig = sum(1 for s in self.signals if s['action'] == 'EXIT')
        market = sum(1 for s in self.signals if s['order_type'] == 'MARKET')
        limit = sum(1 for s in self.signals if s['order_type'] == 'LIMIT')
        stop = sum(1 for s in self.signals if s['order_type'] == 'STOP')
        
        return {
            'total_signals': total,
            'buy_signals': buy,
            'sell_signals': sell,
            'entry_signals': entry,
            'exit_signals': exit_sig,
            'market_orders': market,
            'limit_orders': limit,
            'stop_orders': stop,
            'csv_file': str(self.signal_log_csv),
            'json_file': str(self.signal_log_json)
        }
    
    def export_to_json(self):
        """Export all signals to JSON file"""
        with open(self.signal_log_json, 'w', encoding='utf-8') as f:
            json.dump(self.signals, f, indent=2)
        logger.info(f"Signals exported to JSON: {self.signal_log_json}")
    
    def export_to_dataframe(self) -> pd.DataFrame:
        """Export signals to DataFrame for analysis"""
        return pd.DataFrame(self.signals)
    
    def get_signals_for_replay(self) -> List[Dict[str, Any]]:
        """
        Get signals in format suitable for trade simulation replay
        
        Returns:
            List of signals with parsed JSON fields
        """
        replay_signals = []
        for signal in self.signals:
            replay_signal = signal.copy()
            # Parse JSON strings back to dicts
            replay_signal['indicator_values'] = json.loads(signal['indicator_values'])
            replay_signal['market_data'] = json.loads(signal['market_data'])
            replay_signal['strategy_state'] = json.loads(signal['strategy_state'])
            replay_signals.append(replay_signal)
        return replay_signals
    
    def close(self):
        """Close the logger, export JSON, and print summary"""
        # Export to JSON
        self.export_to_json()
        
        # Print summary
        summary = self.get_signal_summary()
        logger.info(f"Signal Generation Summary:")
        logger.info(f"  Total Signals: {summary['total_signals']}")
        logger.info(f"  Buy Signals: {summary['buy_signals']}")
        logger.info(f"  Sell Signals: {summary['sell_signals']}")
        logger.info(f"  Entry Signals: {summary['entry_signals']}")
        logger.info(f"  Exit Signals: {summary['exit_signals']}")
        logger.info(f"  Market Orders: {summary['market_orders']}")
        logger.info(f"  Limit Orders: {summary['limit_orders']}")
        logger.info(f"  Stop Orders: {summary['stop_orders']}")
        logger.info(f"  CSV saved to: {summary['csv_file']}")
        logger.info(f"  JSON saved to: {summary['json_file']}")
